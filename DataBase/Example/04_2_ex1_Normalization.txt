1. 정규화(Normalization) 란?
	데이터 베이스의 변경 시 일어 날 수 있는 이상현상을 제거하기위해
	관계형 데이터베이스의 설계에서 데이터를 구조화하는 프로세스입니다.
	이를 단계별로 구분하여 정규형이 높아질수록 이상현상은 줄어들게 됩니다.

2. 정규화의 장점
	- DB 변경시에 발생하는 이상현상(주석 *1 참조)을 제거 가능
	- 새로운 데이터 형의 추가로 인한 확장 시, 구조변경에 용이
	- DB와 연동된 응용 프로그램의 생명을 연장

3. 정규화의 단점
	- 테이블의 분해로 인해 JOIN연산이 증가
	- 데이터를 처리할 때 속도의 저하가 발생 할 가능성이 존재
	- JOIN이 많이 발생하여 성능 저하가 발생 시, 반정규화(De-Normalization)를 적용해야 함

4. 정규화의 종류
	4-1. 제1 정규형(1NF)  (참조 : 04_2_img1_1NF.png)
		- 각 컬럼은 하나의 속성값만을 가져야 합니다. (각 컬럼에 값이 하나씩만 들어가 있어야함)
		- 하나의 컬럼은 같은 타입의 값을 가져야 합니다.
		- 각 컬럼은 유일한 이름을 가져야 합니다. (학생번호, 이름, 과목 다 다른컬럼)
		- 컬럼의 순서는 상관없어야 합니다.

	4-2. 제2 정규형(2NF)  (참조 : 04_2_img2_2NF.png)
		- 1NF를 만족해야 합니다.
		- 모든 컬럼이 부분적 종속이 없어야 합니다.(완전 함수 종속 상태)(주석 *2 참조)

	4-3. 제3 정규형(3NF)  (참조 : 04_2_img3_3NF.png)
		- 2NF를 만족해야 합니다.
		- 기본키를 제외한 속성들 간의 이행 종속성이 없어야 합니다.

	4-4. BCNF(Boyce-Codd Normal Form)  (참조 : 04_2_img4_BCNF.png)
		- 3NF를 만족해야 합니다.
		- 모든 결정자가 후보키 집합에 속해야 합니다.
		결정자 : 특정값(emp_no)을 알고있을때 다른(first_name ,last_name, ...)값들을 알수있는것

	4-5. 제4 정규형(4NF)  (참조 : 04_2_img5_4NF.png)
		- BCNF를 만족해야 합니다.
		- 다치 종속(주석 *4 참조)이 없어야 합니다.

	4-6. 제5 정규형(5NF)  (참조 : 04_2_img6_5NF.png)
		- 4NF를 만족해야 합니다.
		- 조인 종속을 제거해야 합니다.


********************
***** 주석 참조 *****
********************

*1. 이상현상(Anomaly)
	- 삽입 이상(Insertion Anomaly)
		레코드 삽입 시 특정 속성에 해당하는 값이 없어 NULL을 입력해야 하는 현상
	- 삭제 이상(Deletion Anomaly)
		레코드 삭제 시 같이 저장된 다른 정보까지 연쇄적으로 삭제되는 현상
	- 갱신 이상(Update Anomaly)
		레코드 갱신 시 중복된 데이터의 일부만 갱신되어 일어나는 데이터 불일치 현상 

*2. 함수 종속성(Functional Dependency)
	- 속성 A의 값을 알면 속성 B의 값이 유일하게 정해지는 관계입니다. (주민번호를 알면 그사람이 누군지 알수있음)
	- A->B로 표기하며 A는 B의 결정자(Determinant)라고 칭합니다.
	- 모든 속성에 대해 함수 종속성을 만족하는 것은 완전 함수 종속 상태라고 합니다.

*3. 이행 종속성 : "A는 B이고 B는 C 일 때, A는 C이다"가 성립하는 현상

*4. 다치 종속(Multi-valued Dependency)
	같은 테이블 내의 독립적인 두 개 이상의 컬럼이 또 다른 컬럼에 종속되는 상태입니다.

*5. 조인 종속(Joint dependency)
	하나의 테이블을 여러개로 분해 했다가 다시 조인했을 때,
	데이터의 손실이 없고 필요 없는 데이터가 생기는 상태입니다.
